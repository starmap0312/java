// HOCON: Human-Optimized Config Object Notation, a super-set of JSON
// Goal:
// 1) it keeps the semantics from JSON (tree structure; set of types; encoding/escaping)
// 2) it is more convenient as a human-editable config file format 
// Features designed for human usage:
// 1) less noisy / less pedantic syntax
// 2) ability to refer to another part of the configuration (set a value to another value)
// 3) import/include another configuration file into the current file
// 4) a mapping to a flat properties list such as Java's system properties
// 5) ability to get values from environment variables
// 6) ability to write comments
// Implementation properties:
// 1) a JSON superset: all valid JSON should be valid and should result in the same in-memory data
//    HOCON is significantly harder to specify and to parse than JSON
// 2) deterministic: it should be clear what's invalid and invalid files should generate errors
// 3) minimal look-ahead: able to tokenize the file by looking at only the next three characters
// Syntax
// 1) Key-value separator: "=" character can be used anywhere JSON allows ":", i.e. separate (key, value) pair
//    if a key is followed by {}, the ":" or "=" can be omitted, ex. "foo" {} == "foo" : {}
// 2) Unquoted strings: is a string value if it does not contain forbidden characters, ex. $, {, }, etc.
// 3) String value concatenation: ex. foo bar baz == oo bar baz"
// 4) Path expressions: used to write out a path through the object graph
//    it appears in two places:
//    a) in substitutions, ex. ${foo.bar}
//    b) as the keys in objects, ex. { foo.bar: 42 }

# example 1
my.organization {
  project {
    name = "HelloWorld"
    description = ${my.organization.project.name} "is the project name"
  }
  team = {
    members = [
      "John"
      "Wall"
    ]
  }
}

# support JAVA standard properties format
my.organization.team.age = 26

# example 2
// Duplicate keys and object merging
// 1) duplicate keys are invalid JSON
// 2) To merge objects:
//    a) add fields present in only one of the two objects to the merged object
//    b) for non-object-valued fields present in both objects, field found in the second is used 
//    c) for object-valued fields present in both objects, object values s recursively merged
foo {
  "key": { "one": 1 },
  key: { "two": 2 }
}
// the above two key1.foo objects are merged, leading to the following equivalent 
dup {
  key : { "one": 1, "two": 2 }
}

// override object value
dup {
  "key" : { "one": 1, "two": 3 }
}

# example 3
// Conversion of numerically-indexed objects to arrays
array1 {
  "0": 1
  "1" : 2
}
// the above could be treated as
array2 = [ 1, 2 ]
// or in JAVA standard properties format 
array3.0 = 1
array3.1 = 2
